{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to CLV_Analysis Documentation! \ud83c\udf7e\ud83e\udd42","text":"<p>\ud83d\ude80 Welcome to the documentation for CLV_Analysis, a starting Python package with good potential\ud83d\udc40 designed for Customer Lifetime Value (CLV) analysis in the retail landscape. Whether you are a data scientist\ud83d\udc68\u200d\ud83d\udcbc, business analyst\ud83d\udc69\u200d\ud83d\udcbc, or developer\ud83e\uddd1\u200d\ud83d\udcbc, this documentation will guide you through the features and functionalities of the CLV_Analysis package.</p>"},{"location":"#our-problem-definition","title":"Our Problem Definition! \ud83e\udd13","text":"<p>Customer Lifetime Value (CLV) Analysis Challenges in Retail!</p> <p>\ud83c\udfc6 We believe, accurate CLV determination is crucial for sustained business success. </p> <p>\ud83e\udd2f Retail stores using product scanning technology face the challenge of reliable CLV computation and deriving actionable insights for strategic decisions. </p>"},{"location":"#so-what-is-clv_analysis","title":"So, What is CLV_Analysis? \ud83e\udd14","text":"<p>We present a solution \ud83c\udfaf to address the challenges posed by the Customer Lifetime Value (CLV) Analysis in Retail \ud83d\uded2.</p> <p>CLV_Analysis package empowers businesses in the retail \ud83d\udecd sector to accurately determine and optimize Customer Lifetime Value. This package provides a comprehensive toolkit for performing high-level CLV analysis, leveraging product scanning technology data to derive actionable insights \ud83d\udcca\ud83d\udcc8.</p>"},{"location":"#getting-started","title":"Getting Started \ud83d\udc69\u200d\ud83d\udcbb","text":"<p>\ud83d\udcd6 Dive into the Installation Guide provided in User Guide to set up CLV_Analysis in your Python environment.</p> <p>\ud83d\udee0 Explore the Quick Start guide provided in User Guide to perform a rapid CLV analysis using synthetic data.</p> <p>\ud83d\udcd8 Refer to the User Guide for detailed instructions on utilizing the package functionalities, and many more.</p>"},{"location":"#features-at-a-glance","title":"Features at a Glance \ud83d\udc8e","text":"<p>\ud83d\udd04 Seamless integration with retail operations, especially those employing product scanning technology (SKU codes).</p> <p>\ud83d\udcca Comprehensive CLV analysis, including data checking, preprocessing, and predictive modeling.</p> <p>\ud83c\udf10 FastAPI integration for interactive API documentation and CRUD operations.</p>"},{"location":"#benefits-and-implications","title":"Benefits and Implications \ud83d\ude4c","text":"<p>\ud83d\udccc Efficiency and Accuracy: This Python package ensures efficiency and accuracy in CLV computation, enabling businesses to make informed decisions.</p> <p>\ud83d\udccc Strategic Decision Support: Decision-makers gain valuable insights into customer behavior and preferences, aiding in the formulation of strategic decisions for sustained profitability.</p> <p>\ud83d\udccc User-Friendly Implementation: The package is designed for user-friendly implementation, allowing businesses to leverage its capabilities without extensive technical expertise.</p>"},{"location":"#how-to-contribute","title":"How to Contribute? \ud83e\udd1d","text":"<p>\ud83d\udca1 We welcome contributions from the community! If you have ideas for improvements, bug fixes, or new features, please check out our User Guide.</p>"},{"location":"#ready-to-uncover-the-insights-hidden-in-your-retail-data-lets-get-started-with-clv_analysis","title":"Ready to uncover the insights hidden in your retail data? \ud83e\udd41 Let's get started with CLV_Analysis! \ud83d\ude80","text":""},{"location":"cltv_model/","title":"CLTVModel() Class","text":"<p>The <code>CLTVModel</code> class is used for Customer Lifetime Value (CLTV) prediction based on the Beta Geo Fitter (<code>bgf</code>) and Gamma-Gamma Fitter (<code>ggf</code>) models from the lifetimes library.</p> <p>Note:</p> <ul> <li> <p>Ensure that the lifetimes, pandas, matplotlib, and warnings libraries are installed.</p> </li> <li> <p>The CLTVModel class assumes a specific structure in the loaded database and data.</p> </li> </ul>"},{"location":"cltv_model/#load-data-from-the-database","title":"Load data from the database.","text":"<pre><code>load_data(query='''\n        SELECT\n            s.sales_id,\n            d.date,\n            s.customer_id,\n            s.transaction_id,\n            p.product_category,\n            p.SKU,\n            s.quantity,\n            p.price as unit_price\n        FROM\n            date d \n        JOIN\n            sales_fact s ON d.date_id = s.date_id\n        JOIN\n            product p ON s.product_id = p.product_id;\n        ''')\n</code></pre> <p>Parameters:</p> <ul> <li><code>query (str)</code>: SQL query to retrieve the data. Default is the provided query.</li> </ul> <p>Returns:</p> <ul> <li><code>pd.DataFrame</code>: Loaded DataFrame.</li> </ul>"},{"location":"cltv_model/#display-information-about-the-dataframe","title":"Display information about the DataFrame","text":"<p>Including shape, info, unique values, missing values, quantiles, and head.</p> <p><pre><code>check_data(head=7, df = None)\n</code></pre> Parameters:</p> <ul> <li> <p><code>head (int)</code>:  Number of rows to display. Default is 7.</p> </li> <li> <p>df <code>(pd.DataFrame)</code>:  DataFrame to check. Default is the <code>df</code> attribute.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>None</code></li> </ul>"},{"location":"cltv_model/#calculate-and-set-the-sales-amount-based-on-unit-price-and-quantity","title":"Calculate and set the sales amount based on unit price and quantity.","text":"<pre><code>calculate_sales_amount(df = None,\n                       unit_price_col= \"unit_price\",\n                       quantity_col = 'quantity',\n                       sales_amount_colname = \"sales_amount\")\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>df (pd.DataFrame, optional)</code>: DataFrame to perform calculations on. Default is the <code>df</code> attribute.</p> </li> <li> <p><code>unit_price_col (str, optional)</code>: Column name of unit price. Default is <code>unit_price</code>.</p> </li> <li> <p><code>quantity_col (str, optional)</code>: Column name of quantity. Default is <code>quantity</code>.</p> </li> <li> <p><code>sales_amount_colname (str, optional)</code>: Column name for sales amount. Default is <code>sales_amount</code>.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>pd.DataFrame</code>: DataFrame with the sales amount column added.</li> </ul>"},{"location":"cltv_model/#calculate-and-set-customer-summary-metrics","title":"Calculate and set customer summary metrics.","text":"<p>Including total transactions and total sales amount.</p> <pre><code>calculate_customer_summary(df = None,\n                           customer_id_col= 'customer_id',\n                           transaction_id_col= 'transaction_id', \n                           sales_amount_col = None, \n                           total_transactions_colname = 'total_transactions',\n                           total_sales_amount_colname = 'total_sales_amount')\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>df (pd.DataFrame)</code>: DataFrame to perform calculations on. Default is the <code>df</code> attribute.</p> </li> <li> <p><code>customer_id_col (str)</code>: Column name of customer ID. Default is <code>customer_id</code>.</p> </li> <li> <p><code>transaction_id_col (str)</code>: Column name of transaction ID. Default is <code>transaction_id</code>.</p> </li> <li> <p><code>sales_amount_col (pd.Series)</code>: Series containing sales amount. Default is the <code>sales_amount</code> attribute.</p> </li> <li> <p><code>total_transactions_colname (str)</code>: Column name for total transactions. Default is <code>total_transactions</code>.</p> </li> <li> <p><code>total_sales_amount_colname (str)</code>: Column name for total sales amount. Default is <code>total_sales_amount</code>.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>pd.DataFrame</code>: Customer summary DataFrame with total transactions and total sales amount.</li> </ul>"},{"location":"cltv_model/#calculate-and-set-average-order-value","title":"Calculate and set average order value.","text":"<p><pre><code>calculate_average_order_value(customer_summary = None,\n                              total_sales_amount_col = None, \n                              total_transactions_col = None,\n                              average_order_value_colname = 'average_order_value')\n</code></pre> Parameters:</p> <ul> <li> <p><code>customer_summary (pd.DataFrame, optional)</code>: Customer summary DataFrame. Default is the <code>customer_summary</code> attribute.</p> </li> <li> <p><code>total_sales_amount_col (pd.Series, optional)</code>: Series containing total sales amount. Default is the <code>total_sales_amount</code> attribute.</p> </li> <li> <p><code>total_transactions_col (pd.Series, optional)</code>: Series containing total transactions. Default is the <code>total_transactions</code> attribute.</p> </li> <li> <p><code>average_order_value_colname (str, optional)</code>: Column name for average order value. Default is <code>average_order_value</code>.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>pd.DataFrame</code>: Customer summary DataFrame with the average order value column added.</li> </ul>"},{"location":"cltv_model/#calculate-and-set-purchase-frequency","title":"Calculate and set purchase frequency.","text":"<pre><code>calculate_purchase_frequency(customer_summary = None, \n                             total_transactions_col = None , \n                             purchase_frequency_colname = 'purchase_frequency')\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>customer_summary (pd.DataFrame, optional)</code>: Customer summary DataFrame. Default is the <code>customer_summary</code> attribute.</p> </li> <li> <p><code>total_transactions_col (pd.Series, optional)</code>: Series containing total transactions. Default is the <code>total_transactions</code> attribute.</p> </li> <li> <p><code>purchase_frequency_colname (str, optional)</code>: Column name for purchase frequency. Default is <code>purchase_frequency</code>.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>pd.DataFrame</code>: Customer summary DataFrame with the purchase frequency column added.</li> </ul>"},{"location":"cltv_model/#calculate-and-set-repeat-rate","title":"Calculate and set repeat rate.","text":"<p><pre><code>calculate_repeat_rate(customer_summary=None, total_transactions_col=None)\n</code></pre> Parameters:</p> <ul> <li> <p><code>customer_summary (pd.DataFrame, optional)</code>: Customer summary DataFrame. Default is the <code>customer_summary</code>attribute.</p> </li> <li> <p><code>total_transactions_col (pd.Series, optional)</code>: Series containing total transactions. Default is the <code>total_transactions</code> attribute.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>float</code>: Calculated repeat rate. Returns 0 if no customers with more than one transaction are found.</li> </ul> <p>Raises:</p> <ul> <li> <p><code>ValueError</code>: If the required column is not present in the <code>customer_summary</code>DataFrame.</p> </li> <li> <p><code>Warning</code>: If no customers with more than one transaction are found, a warning is raised.</p> </li> </ul> <p>Notes:</p> <ul> <li>The repeat rate is calculated as the ratio of customers with more than one transaction to the total number of customers.</li> </ul>"},{"location":"cltv_model/#calculate-and-set-churn-rate","title":"Calculate and set churn rate.","text":"<p><pre><code>calculate_churn_rate(repeat_rate = None)\n</code></pre> Parameters:</p> <ul> <li><code>repeat_rate (float)</code>: Repeat rate of customers.Default is the <code>repeat_rate</code> attribute.</li> </ul> <p>Returns:</p> <ul> <li><code>float</code>: Calculated churn rate.</li> </ul>"},{"location":"cltv_model/#calculate-and-set-profit-margin","title":"Calculate and set profit margin.","text":"<p><pre><code>calculate_profit_margin(profit_margin_rate=0.10,\n                        customer_summary = None,\n                        total_sales_amount_col = None,\n                        profit_margin_colname = 'profit_margin')\n</code></pre> Parameters:</p> <ul> <li> <p><code>profit_margin_rate (float, optional)</code>: Profit margin rate to be applied. Default is <code>0.10</code>.</p> </li> <li> <p><code>customer_summary (pd.DataFrame, optional)</code>: Customer summary DataFrame. Default is the <code>customer_summary</code> attribute.</p> </li> <li> <p><code>total_sales_amount_col (pd.Series, optional)</code>: Series containing total sales amount. Default is the <code>total_sales_amount</code> attribute.</p> </li> <li> <p><code>profit_margin_colname (str, optional)</code>: Column name for profit margin. Default is <code>profit_margin</code>.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>pd.DataFrame</code>: Customer summary DataFrame with the profit margin column added.</li> </ul> <p>Raises:</p> <p><code>ValueError:</code> If the required column is not present in the <code>customer_summary</code> DataFrame or if the DataFrame is empty.</p> <p>Notes:</p> <p>The profit margin is calculated by multiplying the total sales amount by the specified profit margin rate.</p>"},{"location":"cltv_model/#calculate-and-set-customer-value","title":"Calculate and set customer value.","text":"<pre><code>calculate_customer_value(customer_summary = None,\n                         average_order_value_col = None,\n                         purchase_frequency_col = None,\n                         customer_value_colname = 'customer_value')\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>customer_summary (pd.DataFrame, optional)</code>: Customer summary DataFrame. Default is the <code>customer_summary</code> attribute.</p> </li> <li> <p><code>average_order_value_col (pd.Series, optional)</code>: Series containing average order value. Default is the <code>average_order_value</code> attribute.</p> </li> <li> <p><code>purchase_frequency_col (pd.Series, optional)</code>: Series containing purchase frequency. Default is the <code>purchase_frequency</code> attribute.</p> </li> <li> <p><code>customer_value_colname (str, optional)</code>: Column name for customer value. Default is <code>customer_value</code>.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>pd.DataFrame</code>: Customer summary DataFrame with the customer value column added.</li> </ul> <p>Raises:</p> <p><code>ValueError</code>: If the required columns are not present in the customer_summary DataFrame.</p> <p>Notes:</p> <p>Customer value is calculated as the product of average order value and purchase frequency.</p>"},{"location":"cltv_model/#calculate-and-set-customer-lifetime-value-cltv","title":"Calculate and set customer lifetime value (CLTV).","text":"<p><pre><code>calculate_cltv(customer_summary = None ,\n               churn_rate = None,\n               customer_value_col = None, \n               profit_margin_col = None, \n               cltv_colname = 'clv')\n</code></pre> Parameters:</p> <ul> <li> <p><code>customer_summary (pd.DataFrame, optional)</code>: Customer summary DataFrame. Default is the <code>customer_summary</code> attribute.</p> </li> <li> <p><code>churn_rate (float, optional)</code>: Churn rate of customers. Default is the <code>churn_rate</code> attribute.</p> </li> <li> <p><code>customer_value_col (pd.Series, optional)</code>: Series containing customer value. Default is the <code>customer_value</code> attribute.</p> </li> <li> <p><code>profit_margin_col (pd.Series, optional)</code>: Series containing profit margin. Default is the <code>profit_margin</code> attribute.</p> </li> <li> <p><code>cltv_colname (str, optional)</code>: Column name for CLTV. Default is <code>clv</code>.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>pd.DataFrame</code>: Customer summary DataFrame with the CLTV column added.</li> </ul> <p>Raises:</p> <p><code>ValueError</code>: If the required columns are not present in the <code>customer_summary</code> DataFrame.</p> <p>Notes:</p> <p>CLTV is calculated as (Customer Value / Churn Rate) * Profit Margin.</p>"},{"location":"cltv_model/#calculate-and-set-customer-lifetime-value-cltv-using-the-probabilistic-model","title":"Calculate and set customer lifetime value (CLTV) using the probabilistic model.","text":"<pre><code>calculate_cltv_pr(date_col = 'date', \n                  transaction_id_col = 'transaction_id',\n                  customer_id_col = 'customer_id',\n                  sales_amount_col = None,\n                  df=None)\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>date_col (str, optional)</code>: Column name of date. Default is <code>date</code>.</p> </li> <li> <p><code>transaction_id_col (str, optional)</code>: Column name of transaction ID. Default is <code>transaction_id</code>.</p> </li> <li> <p><code>customer_id_col (str, optional)</code>: Column name of customer ID. Default is customer_id.</p> </li> <li> <p><code>sales_amount_col (pd.Series, optional)</code>: Series containing sales amount. Default is the <code>sales_amount</code> attribute.</p> </li> <li> <p><code>df (pd.DataFrame, optional)</code>: DataFrame to perform calculations on. Default is the <code>df</code> attribute.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>None</code></li> </ul> <p>Raises:</p> <p><code>ValueError</code>: If the required columns are not present in the DataFrame.</p> <p>Notes:</p> <p>CLTV is calculated using a probabilistic model based on recency, frequency, and monetary values.</p>"},{"location":"cltv_model/#return-column-names-for-customer-lifetime-value-cltv-using-the-probabilistic-model","title":"Return column names for customer lifetime value (CLTV) using the probabilistic model.","text":"<p>Used in calculate_cltv_pr()</p> <pre><code>_calculate_cltv_pr_columns(recency_colname = 'recency',\n                           T_colname = 'T',\n                           frequency_colname = 'frequency',\n                           monetary_colname = 'monetary')\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>recency_colname (str, optional)</code>: Column name for recency. Default is <code>recency</code>.</p> </li> <li> <p><code>T_colname (str, optional)</code>: Column name for T (age of the customer). Default is <code>T</code>.</p> </li> <li> <p><code>frequency_colname (str, optional)</code>: Column name for frequency. Default is <code>frequency</code>.</p> </li> <li> <p><code>monetary_colname (str, optional)</code>: Column name for monetary value. Default is <code>monetary</code>.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>Tuple of str</code>: Column names for recency, T, frequency, and monetary.</li> </ul>"},{"location":"cltv_model/#secondary-method-used-to-calculate-cltv","title":"Secondary method used to calculate CLTV.","text":"<p>Used in calculate_cltv_pr()</p> <p><pre><code>_calculate_recency_T(InvoiceDate)\n</code></pre> Parameters:</p> <p><code>InvoiceDate (pd.Series)</code>: Series containing invoice dates.</p> <p>Returns:</p> <p><code>Tuple of int</code>: Recency and T.</p>"},{"location":"cltv_model/#secondary-method-used-to-calculate-cltv-considering-a-specific-date","title":"Secondary method used to calculate CLTV, considering a specific date.","text":"<p>Used in calculate_cltv_pr()</p> <p><pre><code>_calculate_recency_today(InvoiceDate, df = None, date_col = 'date', days=1)\n</code></pre> Parameters:</p> <ul> <li> <p><code>InvoiceDate (pd.Series)</code>: Series containing invoice dates.</p> </li> <li> <p><code>df (pd.DataFrame, optional)</code>: DataFrame to retrieve the maximum date. Default is the <code>df</code> attribute.</p> </li> <li> <p><code>date_col (str, optional)</code>: Column name of date. Default is <code>date</code>.</p> </li> <li> <p><code>days (int, optional)</code>: Number of days to consider for recency. Default is 1.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>int:</code> Recency considering today's date.</li> </ul>"},{"location":"cltv_model/#calculate-and-set-monetary-value-frequency-recency-and-t-after-applying-filters","title":"Calculate and set monetary value, frequency, recency, and T after applying filters.","text":"<p>Used in calculate_cltv_pr()</p> <pre><code>_calculate_monetary_frequency_filter(customer_summary_pr=None,\n                                     monetary_col=None,\n                                     frequency_col=None,\n                                     recency_col=None, T_col=None)\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>customer_summary_pr (pd.DataFrame, optional)</code>: Customer summary DataFrame. Default is the <code>customer_summary_pr</code> attribute.</p> </li> <li> <p><code>monetary_col (pd.Series, optional)</code>: Series containing monetary value. Default is the <code>monetary</code> attribute.</p> </li> <li> <p><code>frequency_col (pd.Series, optional)</code>: Series containing frequency. Default is the <code>frequency</code> attribute.</p> </li> <li> <p><code>recency_col (pd.Series, optional)</code>: Series containing recency. Default is the <code>recency</code> attribute.</p> </li> <li> <p><code>T_col (pd.Series, optional)</code>: Series containing T (age of the customer). Default is the <code>T</code> attribute.</p> </li> </ul> <p>Returns:</p> <p><code>None</code></p> <p>Raises:</p> <p><code>ValueError</code>: If the required columns are not present in the <code>customer_summary_pr</code> DataFrame.</p>"},{"location":"cltv_model/#fit-the-beta-geo-fitter-bgnbd-model-using-the-provided-frequency-recency-and-t-values","title":"Fit the Beta Geo Fitter (BG/NBD) model using the provided frequency, recency, and T values.","text":"<pre><code>fit_bgf_model(customer_summary_pr = None,\n              frequency_colname = \"frequency\",\n              recency_colname = \"recency\",\n              T_colname = \"T\")\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>customer_summary_pr (pd.DataFrame, optional)</code>: Customer summary DataFrame. Default is the <code>customer_summary_pr</code> attribute.</p> </li> <li> <p><code>frequency_colname (str, optional)</code>: Column name of the customer transaction frequency. Default is <code>frequency</code>.</p> </li> <li> <p><code>recency_colname (str, optional)</code>: Column name of the recency (time since the last transaction). Default is <code>recency</code>.</p> </li> <li> <p><code>T_colname (str, optional)</code>: Column name of the T (age of the customer). Default is <code>T</code>.</p> </li> </ul> <p>Returns:</p> <p><code>None</code></p>"},{"location":"cltv_model/#plot-the-frequency-recency-matrix-using-the-fitted-bgnbd-model","title":"Plot the frequency-recency matrix using the fitted BG/NBD model.","text":"<p><pre><code>plot_frequency_recency_matrix(BetaGeoFitter = None)\n</code></pre> Parameters:</p> <ul> <li><code>BetaGeoFitter (lifetimes.BetaGeoFitter, optional)</code>: An instance of the BetaGeoFitter model. If not provided, the internal BetaGeoFitter instance associated with the CLTVModel will be used.</li> </ul> <p>Returns:</p> <p><code>None</code></p>"},{"location":"cltv_model/#plot-the-probability-alive-matrix-using-the-fitted-bgnbd-model","title":"Plot the probability alive matrix using the fitted BG/NBD model.","text":"<p><pre><code>plot_probability_alive_matrix(BetaGeoFitter = None)\n</code></pre> Parameters:</p> <ul> <li><code>BetaGeoFitter (lifetimes.BetaGeoFitter, optional)</code>: An instance of the BetaGeoFitter model. If not provided, the internal BetaGeoFitter instance associated with the CLTVModel will be used.</li> </ul> <p>Returns:</p> <p><code>None</code></p>"},{"location":"cltv_model/#predict-the-number-of-purchases-a-customer-will-make-in-the-future","title":"Predict the number of purchases a customer will make in the future.","text":"<p><pre><code>predict_purchases(t=1, customer_summary_pr=None,\n                  frequency_col=None,\n                  recency_col=None, \n                  T_col=None,\n                  predicted_purchases_colname='predicted_purchases')\n</code></pre> Parameters:</p> <ul> <li> <p><code>t (int, optional)</code>: Time period for future predictions. Default is 1.</p> </li> <li> <p><code>customer_summary_pr (pd.DataFrame, optional)</code>: Customer summary DataFrame. Default is the <code>customer_summary_pr</code> attribute.</p> </li> <li> <p><code>frequency_col (pd.Series, optional)</code>: Series containing customer transaction frequency. Default is the <code>frequency</code> attribute.</p> </li> <li> <p><code>recency_col (pd.Series, optional)</code>: Series containing recency (time since the last transaction). Default is the <code>recency</code> attribute.</p> </li> <li> <p><code>T_col (pd.Series, optional)</code>: Series containing T (age of the customer). Default is the <code>T</code> attribute.</p> </li> <li> <p><code>predicted_purchases_colname (str, optional)</code>: Column name for predicted purchases. Default is <code>predicted_purchases</code>.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>pd.DataFrame</code>: Customer summary DataFrame sorted by predicted purchases.</li> </ul>"},{"location":"cltv_model/#plot-the-actual-and-predicted-number-of-transactions-in-each-time-period","title":"Plot the actual and predicted number of transactions in each time period.","text":"<pre><code>plot_period_transactions(BetaGeoFitter = None)\n</code></pre> <p>Parameters:</p> <ul> <li><code>BetaGeoFitter (lifetimes.BetaGeoFitter, optional)</code>: An instance of the BetaGeoFitter model. If not provided, the internal BetaGeoFitter instance associated with the CLTVModel will be used.</li> </ul> <p>Returns:</p> <p><code>None</code></p>"},{"location":"cltv_model/#fit-the-gamma-gamma-fitter-ggf-model-using-the-provided-frequency-and-monetary-values","title":"Fit the Gamma-Gamma Fitter (GGF) model using the provided frequency and monetary values.","text":"<pre><code>fit_ggf_model(customer_summary_pr=None,\n              frequency_colname=\"frequency\",\n              monetary_colname=\"monetary\")\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>customer_summary_pr (pd.DataFrame, optional)</code>: Customer summary DataFrame. Default is <code>the customer_summary_pr</code> attribute.</p> </li> <li> <p><code>frequency_colname (str, optional)</code>: Column name of customer transaction frequency. Default is <code>frequency</code>.</p> </li> <li> <p><code>monetary_colname (str, optional)</code>: Column name of customer monetary value. Default is <code>monetary</code>.</p> </li> </ul> <p>Returns:</p> <p><code>None</code></p>"},{"location":"cltv_model/#calculate-the-expected-average-profit-per-transaction","title":"Calculate the expected average profit per transaction.","text":"<pre><code>calculate_expected_average_profit(customer_summary_pr = None, \n                                  frequency_colname=\"frequency\", \n                                  monetary_colname=\"monetary\",\n                                  exp_avg_profit_colname = \"expected_average_profit\")\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>customer_summary_pr (pd.DataFrame, optional)</code>: Customer summary DataFrame. Default is the <code>customer_summary_pr</code> attribute.</p> </li> <li> <p><code>frequency_colname (str, optional)</code>: Column name for customer transaction frequency. Default is <code>frequency</code>.</p> </li> <li> <p><code>monetary_colname (str, optional)</code>: Column name of customer monetary value. Default is <code>monetary</code>.</p> </li> <li> <p><code>exp_avg_profit_colname (str, optional)</code>: Column name for expected average profit. Default is <code>expected_average_profit</code>.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>pd.DataFrame</code>: Customer summary DataFrame sorted by expected average profit (descending).</li> </ul>"},{"location":"cltv_model/#calculate-customer-lifetime-value-cltv-predictions-using-the-fitted-models","title":"Calculate Customer Lifetime Value (CLTV) predictions using the fitted models.","text":"<pre><code>calculate_cltv_prediction(time_period=12,\n                          discount_rate=0.01,\n                          freq=\"W\",\n                          frequency_col=None,\n                          recency_col=None,\n                          T_col=None,\n                          monetary_col=None)\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>time_period (int, optional)</code>: Time period for CLTV predictions. Default is 12.</p> </li> <li> <p><code>discount_rate (float, optional)</code>: Discount rate for future cash flows. Default is 0.01.</p> </li> <li> <p><code>freq (str, optional)</code>: Frequency of time periods. Default is <code>W</code> (weekly). {\u201cD\u201d, \u201cH\u201d, \u201cM\u201d, \u201cW\u201d} for day, hour, month, week.</p> </li> <li> <p><code>frequency_col (pd.Series, optional)</code>: Series containing customer transaction frequency. Default is the <code>frequency</code> attribute.</p> </li> <li> <p><code>recency_col (pd.Series, optional)</code>: Series containing recency (time since the last transaction). Default is the <code>recency</code> attribute.</p> </li> <li> <p><code>T_col (pd.Series, optional)</code>: Series containing T (age of the customer). Default is the <code>T</code> attribute.</p> </li> <li> <p><code>monetary_col (pd.Series, optional)</code>: Series containing customer monetary value. Default is the <code>monetary</code> attribute.</p> </li> </ul> <p>Returns:</p> <p><code>pd.DataFrame</code>: CLTV predictions for each customer.</p>"},{"location":"cltv_model/#merge-cltv-predictions-with-the-original-dataframe","title":"Merge CLTV predictions with the original DataFrame.","text":"<pre><code>merge_cltv_predictions(cltv_pred = None,\n                       customer_summary_pr = None,\n                       df = None,\n                       customer_id_col = \"customer_id\",\n                       how = 'left')\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>cltv_pred (pd.DataFrame, optional)</code>: CLTV predictions DataFrame. Default is the <code>cltv_pred</code> attribute.</p> </li> <li> <p><code>customer_summary_pr (pd.DataFrame, optional)</code>: Customer summary DataFrame. Default is the <code>customer_summary_pr</code> attribute.</p> </li> <li> <p><code>df (pd.DataFrame, optional)</code>: Original DataFrame containing customer data. Default is the <code>df</code> attribute.</p> </li> <li> <p><code>customer_id_col (str, optional)</code>: Column name of customer ID. Default is <code>customer_id</code>.</p> </li> <li> <p><code>how (str, optional)</code>: Type of merge to be performed (e.g., 'left', 'right', 'outer', 'inner'). Default is <code>left</code>.</p> </li> </ul> <p>Returns:</p> <p><code>None</code></p>"},{"location":"cltv_model/#create-customer-segments-based-on-cltv-predictions","title":"Create customer segments based on CLTV predictions.","text":"<pre><code>create_segments(customer_summary_pr = None,\n                clv_col = 'clv',\n                segment_colname = 'segment',\n                num_segments = 4,\n                labels = [\"D\", \"C\", \"B\", \"A\"])\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>customer_summary_pr (pd.DataFrame, optional)</code>: Customer summary DataFrame. Default is the <code>customer_summary_pr</code> attribute.</p> </li> <li> <p><code>clv_col (str, optional)</code>: Column name for Customer Lifetime Value (CLV). Default is <code>clv</code>.</p> </li> <li> <p><code>segment_colname (str, optional)</code>: Column name for the created segment. Default is <code>segment</code>.</p> </li> <li> <p><code>num_segments (int, optional)</code>: Number of segments to create. Default is 4.</p> </li> <li> <p><code>labels (list, optional)</code>: Labels for the created segments. Default is <code>[\"D\", \"C\", \"B\", \"A\"]</code>.</p> </li> </ul> <p>Returns:</p> <p><code>None</code></p>"},{"location":"cltv_model/#display-a-summary-of-customer-segments-including-count-mean-and-sum","title":"Display a summary of customer segments, including count, mean, and sum.","text":"<pre><code>display_segments_summary(segment_col = None, customer_summary_pr = None)\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>segment_col (pd.Series, optional)</code>: Series containing customer segments. Default is the <code>segment</code> attribute.</p> </li> <li> <p><code>customer_summary_pr (pd.DataFrame, optional)</code>: Customer summary DataFrame. Default is the <code>customer_summary_pr</code> attribute.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>pd.DataFrame</code>: Summary statistics for each customer segment.</li> </ul>"},{"location":"clv_complete/","title":"Complete Analysis with CLTVModel() Class","text":""},{"location":"clv_complete/#importing-the-class-and-making-an-instance","title":"Importing the Class and Making an Instance","text":"<pre><code>from CLV_Analysis.Models.CLTV import CLTVModel\n</code></pre> <p>Instantiate the CLTVModel class <pre><code>cltv_model = CLTVModel()\n</code></pre></p> <p>Load data from the SQLite database <pre><code>cltv_model.load_data()\n</code></pre></p> <p>Check the loaded data <pre><code>cltv_model.check_data()\n</code></pre></p>"},{"location":"clv_complete/#what-is-customer-lifetime-valueclv","title":"What is Customer Lifetime Value(CLV)?","text":"<p>The monetary value a customer will bring to a company during their relationship and communication is known as \"customer lifetime value.\"</p> <p>This will be achieved by using the formulas below:</p> <ul> <li> <p><code>Repeat rate</code>: number of customers who make multiple purchases / all customers</p> </li> <li> <p><code>Churn rate</code>: 1 - repeat rate</p> </li> <li> <p><code>Purchase frequency</code>: total transactions / total number of unique customers</p> </li> <li> <p><code>Average order value</code>: total price / total transactions</p> </li> <li> <p><code>Customer value</code>: average order value * purchase frequency</p> </li> <li> <p><code>Profit margin</code>: total price * profit margin rate(provided by the company)</p> </li> <li> <p><code>CLV</code> = (customer value / churn rate) * profit margin</p> </li> </ul> <p>Customers are segmented based on the generated CLV value, and operations are carried out according to these segments.</p>"},{"location":"clv_complete/#default-dataset-details","title":"Default Dataset Details","text":"<ul> <li> <p><code>sale_id</code>: Unique Sale ID Number for each Respective Sale</p> </li> <li> <p><code>date</code>: Date of Sales Transaction</p> </li> <li> <p><code>customer_id</code>: Unique Customer iID for each Customer</p> </li> <li> <p><code>transaction_id</code>: ID of the Transaction</p> </li> <li> <p><code>product_categor</code>y: Product Category Name</p> </li> <li> <p><code>SKU</code>: Product Code</p> </li> <li> <p><code>quantity</code>: Number of Items Sold in the Transaction</p> </li> <li> <p><code>unit_price</code> : Unit Price of the Respective Product</p> </li> </ul> <p>Calculate sales amount for each transaction <pre><code>cltv_model.calculate_sales_amount().head()\n</code></pre></p> <p>Calculate customer summary <pre><code>cltv_model.calculate_customer_summary().head()\n</code></pre></p> <p>Calculate average order value <pre><code>cltv_model.calculate_average_order_value().head()\n</code></pre></p> <p>Calculate purchase frequency <pre><code>cltv_model.calculate_purchase_frequency().head()\n</code></pre></p> <p>Calculate repeat rate <pre><code>cltv_model.calculate_repeat_rate()\n</code></pre></p> <p>Calculate churn rate <pre><code>cltv_model.calculate_churn_rate()\n</code></pre></p> <p>Calculate profit margin <pre><code>cltv_model.calculate_profit_margin().head()\n</code></pre></p> <p>Calculate customer value <pre><code>cltv_model.calculate_customer_value().head()\n</code></pre></p> <p>Calculate CLTV <pre><code>cltv_tb= cltv_model.calculate_cltv()\n</code></pre></p> <p>Create Segments Divide the CLTV values into n parts and create a segment variable <pre><code>cltv_model.create_segments(customer_summary_pr=cltv_tb).head()\n</code></pre></p> <p>Display the summary of segments <pre><code>cltv_model.display_segments_summary(customer_summary_pr=cltv_tb)\n</code></pre></p>"},{"location":"clv_complete/#clv-prediction-with-bg-nbd-and-gamma-gamma","title":"CLV Prediction with BG-NBD and Gamma-Gamma","text":"<p>CLTV Prediction: BG/NBD Gamma gamma submodel</p> <p>Hereby, performing CLTV prediction with BG/NBD and Gamma-Gamma.</p> <p>Expected Number of Transactions with BG/NBD.</p> <p>BG/NBD is used as a standalone sales prediction model, that is; it predicts the expected number of purchases per customer.</p> <p>The information we need to use in this model and learn from the customer is:</p> <ul> <li> <p><code>frequency</code>: Number of repeated purchases by the customer (more than 1) (frequency)</p> </li> <li> <p><code>recency</code>: Time between a customer's first and last purchase</p> </li> <li> <p><code>T</code>: Time since the customer's first purchase (customer's age)</p> </li> </ul> <p>Calculate CLTV prediction data <pre><code>cltv_model.calculate_cltv_pr().head()\n</code></pre></p> <p>Fit the BG-NBD model <pre><code>cltv_model.fit_bgf_model()\n</code></pre></p> <p>Plot frequency-recency matrix <pre><code>cltv_model.plot_frequency_recency_matrix()\n</code></pre></p> <p>Plot probability alive matrix <pre><code>cltv_model.plot_probability_alive_matrix()\n</code></pre></p>"},{"location":"clv_complete/#ranking-customers-from-best-to-worst","title":"Ranking customers from best to worst","text":"<p>Let's return to our customers and rank them from \"highest expected purchases in the next period\" to lowest. Models expose a method that will predict a customer's expected purchases in the next period using their history.</p> <p>Predict purchases <pre><code>cltv_model.predict_purchases().tail()\n</code></pre></p> <p>Plot period transactions <pre><code>cltv_model.plot_period_transactions()\n</code></pre></p>"},{"location":"clv_complete/#estimating-customers-lifetime-value","title":"Estimating Customers' Lifetime Value","text":"<p>We can train our Gamma-Gamma submodel and predict the conditional, expected average lifetime value of our customers.</p> <p>Fit the Gamma-Gamma model <pre><code>cltv_model.fit_ggf_model()\n</code></pre></p> <p>Calculate expected average profit <pre><code>cltv_model.calculate_expected_average_profit().head()\n</code></pre></p> <p>Calculate CLTV prediction for 3 months <pre><code>cltv_model.calculate_cltv_prediction(time_period = 3, discount_rate = 0.01/4).head()\n</code></pre></p> <p>Calculate CLTV prediction for 12 months <pre><code>cltv_model.calculate_cltv_prediction().head()\n</code></pre></p> <p>Merge CLTV predictions with other variables <pre><code>cltv_model.merge_cltv_predictions().head()\n</code></pre></p> <p>Create segments based on CLTV <pre><code>cltv_model.create_segments().head()\n</code></pre></p> <p>Display segments summary <pre><code>cltv_model.display_segments_summary()\n</code></pre></p>"},{"location":"data_insertion/","title":"Data Insertion Guide","text":"<p>This script loads data into an SQLite database from CSV files using the <code>SqlHandler</code> class from the <code>CLV_Analysis.DB.sql_interactions</code> module. It populates tables for customers, transactions, products, dates, and sales in the <code>temp.db</code> database.</p> <p>Modules:</p> <ul> <li> <p>CLV_Analysis.DB.sql_interactions: Provides the <code>SqlHandler</code> class for SQLite database interactions. (Details in SQL Interactions section)</p> </li> <li> <p>sqlalchemy: SQL toolkit and Object-Relational Mapping (ORM) library. </p> </li> <li> <p>CLV_Analysis.DB.schema: Defines the SQLAlchemy schema. (Details in DB Schema section)</p> </li> <li> <p>pandas: Data manipulation and analysis library.</p> </li> </ul> <p>Note:</p> <ul> <li> <p>Ensure that the necessary dependencies are installed, including pandas, sqlalchemy, and the CLV_Analysis package.</p> </li> <li> <p>The script assumes the presence of CSV files (<code>customer.csv</code>, <code>transactions.csv</code>, <code>product.csv</code>, <code>date.csv</code>, <code>sales.csv</code>) in the <code>data_csv</code> directory.</p> </li> <li> <p>For generating the mentioned CSV files read the <code>Synthetic Data</code> section.</p> </li> <li> <p>The script assumes the presence of <code>temp.db</code> database.</p> </li> <li> <p>For building the mentioned <code>temp.db</code> database schema read the <code>DB Schema</code> section.</p> </li> </ul>"},{"location":"data_insertion/#the-modules","title":"The Modules","text":"<pre><code>from CLV_Analysis.DB.sql_interactions import SqlHandler\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\nfrom CLV_Analysis.DB.schema import Sale\nimport pandas as pd\n</code></pre>"},{"location":"data_insertion/#insertion-into-the-tables","title":"Insertion Into The Tables","text":""},{"location":"data_insertion/#insertion-into-the-table-of-customers","title":"Insertion Into the Table of Customers","text":"<pre><code>Inst = SqlHandler('temp', 'customer')\n\ndata = pd.read_csv('data_csv/customer.csv')\n\n# Inst.truncate_table()\nInst.insert_many(data)\n\nInst.close_cnxn()\n</code></pre>"},{"location":"data_insertion/#insertion-into-the-table-of-transactions","title":"Insertion Into the Table of Transactions","text":"<pre><code>Inst1 = SqlHandler('temp', 'transactions')\n\ndata1 = pd.read_csv('data_csv/transactions.csv')\n\n# Inst1.truncate_table()\nInst1.insert_many(data1)\n\nInst1.close_cnxn()\n</code></pre>"},{"location":"data_insertion/#insertion-into-the-table-of-products","title":"Insertion Into the Table of Products","text":"<pre><code>Inst2 = SqlHandler('temp', 'product')\n\ndata2 = pd.read_csv('data_csv/product.csv')\n\n# Inst2.truncate_table()\nInst2.insert_many(data2)\n\nInst2.close_cnxn()\n</code></pre>"},{"location":"data_insertion/#insertion-into-the-table-of-dates","title":"Insertion Into the Table of Dates","text":"<pre><code>Inst3 = SqlHandler('temp', 'date')\n\ndata3 = pd.read_csv('data_csv/date.csv')\n\n# Inst3.truncate_table()\nInst3.insert_many(data3)\n\nInst3.close_cnxn()\n</code></pre>"},{"location":"data_insertion/#insertion-into-the-fact-table-of-sales","title":"Insertion Into the Fact Table of Sales","text":"<pre><code># Create a SQLAlchemy engine and session\nengine = create_engine('sqlite:///temp.db')\nSession = sessionmaker(bind=engine)\nsession = Session()\n\n# Read CSV file into a list of dictionaries\ndata4 = pd.read_csv('data_csv/sales.csv').to_dict(orient='records')\n\n# Insert the sample data into the 'sales_fact' table\nfor data in data4:\n    sale = Sale(**data)\n    session.add(sale)\n\n# Commit the changes to the database\nsession.commit()\n\n# Close the session\nsession.close()\n</code></pre>"},{"location":"db_schema/","title":"Default Database Schema","text":""},{"location":"db_schema/#the-schema-module","title":"The Schema Module","text":"<ol> <li> <p>The <code>CLV_Analysis/DB/schema</code> module defines the SQLAlchemy models representing entities in the company's database, including Product, Customer, Transaction, Date, and Sale. These models are used to interact with the underlying database and perform CRUD operations.</p> <p>Classes:</p> <ul> <li> <p>Product: Represents a product in the company.</p> </li> <li> <p>Customer: Represents a customer in the company.</p> </li> <li> <p>Transaction: Represents a transaction in the company.</p> </li> <li> <p>Date: Represents a date in the company.</p> </li> <li> <p>Sale: Represents a sale in the company.</p> </li> </ul> <p>Note:</p> <ul> <li>These classes are SQLAlchemy declarative base classes, allowing for easy interaction with the database through an ORM (Object-Relational Mapping).</li> </ul> </li> </ol>"},{"location":"db_schema/#schema-building-guide","title":"Schema Building Guide","text":"<ul> <li> <p>This script builds the database schema using the classes defined in the CLV_Analysis.DB.schema module.</p> </li> <li> <p>It imports all classes from the schema module to create the necessary tables for the SQLite database.</p> </li> </ul> <p>Note: The file containing the following script should be executed to set up the database schema.</p> <pre><code>from CLV_Analysis.DB.schema import *\n</code></pre>"},{"location":"fast_api/","title":"FastAPI Integration","text":""},{"location":"fast_api/#modules","title":"Modules","text":"<ol> <li> <p>The <code>CLV_Analysis/API/models</code> module defines Pydantic models for database entities, representing the data structures used in the FastAPI endpoints for the Sales Fact, Product, Customer, Transaction, and Date entities</p> </li> <li> <p>The <code>CLV_Analysis/API/main</code> module defines FastAPI endpoints for interacting with Sales Fact, Product, Customer, Transaction, and Date entities. It utilizes a SQLite database for data storage and retrieval.</p> <p>Endpoints:</p> <ul> <li> <p><code>sales_fact</code>: APIs for Sales Fact entity (create, read, update, delete).</p> </li> <li> <p><code>product</code>: APIs for Product entity (create, read, update, delete).</p> </li> <li> <p><code>customer</code>: APIs for Customer entity (create, read, update, delete).</p> </li> <li> <p><code>transaction</code>: APIs for Transaction entity (create, read, update, delete).</p> </li> <li> <p><code>date</code>: APIs for Date entity (create, read, update, delete).</p> </li> </ul> <p>Each API endpoint supports standard CRUD operations and interacts with a SQLite database through the <code>sql_interactions</code> module.</p> </li> </ol>"},{"location":"fast_api/#fastapi-application-starting-guide","title":"FastAPI Application Starting Guide","text":"<p>This script starts the FastAPI application using uvicorn and opens it in a web browser.</p> <p>Note: Ensure that the uvicorn package is installed before running this script.</p> <p><pre><code>import subprocess\nimport webbrowser\nfrom CLV_Analysis.API import main\n</code></pre> <pre><code>def start_fastapi():\n    subprocess.run([\"uvicorn\", \"CLV_Analysis.API.main:app\", \"--reload\"])\n    webbrowser.open('http://127.0.0.1:8000/docs#/')\n</code></pre> <pre><code>name = \"__main__\"\n\nif name == \"__main__\":\n    start_fastapi()\n</code></pre></p>"},{"location":"installation/","title":"CLV Analysis Package User Guide","text":""},{"location":"installation/#introduction","title":"Introduction \ud83d\udc4b","text":"<p>Welcome to the CLV_Analysis package!\ud83e\udd17 </p> <p>This package is designed to facilitate Customer Lifetime Value (CLV) analysis in the retail domain.\ud83d\uded2\ud83d\udecd\ufe0f </p> <p>By leveraging this package, you can gain valuable insights into customer behavior and make informed decisions to maximize long-term profitability. \ud83d\udcca\ud83d\udcc8\ud83d\udcc9\ud83c\udfaf</p>"},{"location":"installation/#table-of-contents","title":"Table of Contents \ud83e\udd13","text":"<ul> <li>Logger Module<ul> <li>Classes</li> <li>Usage</li> <li>Example</li> <li>Note</li> </ul> </li> <li>Default Database Schema<ul> <li>The Schema Module</li> <li>Schema Building Guide</li> </ul> </li> <li>Synthetic Data for the Default Database<ul> <li>The Data Generator Module<ul> <li>Functions</li> </ul> </li> <li>Synthetic Data Generation Guide</li> </ul> </li> <li>The SqlHandler() and SQL Queries<ul> <li>SQLite Database Handler Module<ul> <li>SqlHandler()</li> </ul> </li> <li>Queries to Test the Functionality of the Database</li> </ul> </li> <li>Data Insertion Guide<ul> <li>The Modules</li> <li>Insertion Into The Tables</li> </ul> </li> <li>FastAPI Integration<ul> <li>The Modules</li> <li>FastAPI Application Starting Guide</li> </ul> </li> <li>CLTVModel() Class</li> <li>Complete Analysis with CLTVModel() Class<ul> <li>Importing the Class and Making an Instance</li> <li>What is Customer Lifetime Value(CLV)?</li> <li>CLV Prediction with BG-NBD and Gamma-Gamma</li> </ul> </li> </ul>"},{"location":"installation/#installation","title":"Installation \ud83d\udce5","text":"<pre><code>pip install clv_analysis\n</code></pre>"},{"location":"installation/#testing-the-clv_analysis-package-step-by-step","title":"Testing the CLV_Analysis Package Step-by-Step \ud83d\udc63","text":"<p>To ensure the proper functioning of the CLV_Analysis package, follow these steps:</p> <ol> <li> <p>Create a SQLite DB Schema:</p> <ul> <li>Utilize the documentation in DB Schema section to create a SQLite database schema for the analysis.</li> </ul> </li> <li> <p>Generate Synthetic Data:</p> <ul> <li>Use the documentation in Synthetic Data section to create synthetic data for customers, products, transactions, dates, and sales.</li> </ul> </li> <li> <p>Insert Synthetic Data into the SQLite DB Schema:</p> <ul> <li>Insert the generated synthetic data into the SQLite database using the provided insertion guides in the Data Insertion section.</li> </ul> </li> <li> <p>Run Queries to Test Database Functionality:</p> <ul> <li>Test the functionality of the database by running queries. Refer to the SQL Interactions section for guidance.</li> </ul> </li> <li> <p>Open Swagger in API:</p> <ul> <li>Start the FastAPI application to open Swagger UI. For guidance refer to the FastAPI Integration section.</li> </ul> </li> <li> <p>Perform CRUD Operations with FastAPI:</p> <ul> <li> <p>Use the provided CRUD tools to perform Create, Read, Update, and Delete operations on the database.</p> </li> <li> <p>Follow the FastAPI Integration section for assistance.</p> </li> </ul> </li> <li> <p>Check Local Database for Modifications:</p> <ul> <li>Verify the modifications made through FastAPI by inspecting your local SQLite database.</li> </ul> </li> <li> <p>Import the CLTVModel() Class:</p> <ul> <li>Import the CLTVModel() class into your Python environment.</li> <li>Follow the Complete CLV Analysis section for assistance.</li> </ul> </li> <li> <p>Perform Analysis using CLTVModel() Class:</p> <ul> <li>Utilize the CLTVModel() class to conduct a comprehensive Customer Lifetime Value analysis.</li> <li>Follow the Complete CLV Analysis section for step-by-step guidance.</li> </ul> </li> </ol> <p>By following these steps, you can ensure that the CLV_Analysis package is set up correctly and functions as intended.</p>"},{"location":"installation/#troubleshooting","title":"Troubleshooting \ud83c\udfaf","text":"<p>If you encounter any issues, reach out to our team.</p>"},{"location":"installation/#contributing","title":"Contributing \ud83e\udd1d","text":"<p>We welcome contributions! Feel free to submit bug reports, feature requests, or contribute to the codebase on our GitHub repository.</p>"},{"location":"installation/#contact-information","title":"Contact Information \ud83d\udcde","text":"<p>For further assistance or inquiries, contact our support team at </p> <ul> <li>@anahit_baghdasaryan2@edu.aua.am</li> <li>@natela_azoyan@edu.aua.am</li> <li>@lilit_galstyan@edu.aua.am</li> <li>@ofelya_stepanyan@edu.aua.am</li> <li>@narek_khachikyan@edu.aua.am</li> </ul>"},{"location":"logger/","title":"Custom Formatter for Informative Logging","text":"<p>The <code>CLV_Analysis/Logger/logger</code> module defines a custom logging formatter, <code>CustomFormatter</code>, to provide informative and colored output in log messages.</p>"},{"location":"logger/#classes","title":"Classes:","text":"<ul> <li><code>CustomFormatter</code>: Custom formatter for informative logging.</li> </ul>"},{"location":"logger/#usage","title":"Usage:","text":"<ul> <li>Instantiate <code>CustomFormatter</code> and apply it to your logger's handler to enable colored and formatted logging output.</li> </ul>"},{"location":"logger/#example","title":"Example:","text":"<pre><code>import logging\nimport os\n\nlogger = logging.getLogger(os.path.basename(__file__))\nlogger.setLevel(logging.DEBUG)\nch = logging.StreamHandler()\nch.setLevel(logging.DEBUG)\nch.setFormatter(CustomFormatter())\nlogger.addHandler(ch)\n\nlogger.debug(\"debug message\")\nlogger.info(\"Warning: Email has not been sent...\")\nlogger.warning(\"warning message\")\nlogger.error(\"error message\")\nlogger.critical(\"critical message\")\n</code></pre>"},{"location":"logger/#note","title":"Note:","text":"<ul> <li> <p>The formatter uses ANSI escape codes for colored output.</p> </li> <li> <p>Ensure that the console supports ANSI escape codes for proper display.</p> </li> </ul>"},{"location":"sql_interactions/","title":"The SqlHandler() and SQL Queries","text":""},{"location":"sql_interactions/#sqlite-database-handler-module","title":"SQLite Database Handler Module","text":"<p>The <code>CLV_Analysis/DB/sql_interactions</code> module defines the SqlHandler class, which handles SQLite database operations, including table manipulation and data import/export.</p> <p>Note:</p> <ul> <li>This module assumes that the database connection is established   using the SqlHandler class and follows a specific structure.</li> </ul>"},{"location":"sql_interactions/#sqlhandler","title":"SqlHandler()","text":""},{"location":"sql_interactions/#close-the-database-connection","title":"Close the database connection.","text":"<p><pre><code>close_cnxn()\n</code></pre> Returns: <code>None</code></p>"},{"location":"sql_interactions/#retrieve-column-names-of-the-specified-table","title":"Retrieve column names of the specified table.","text":"<p><pre><code>get_table_columns()\n</code></pre> Returns:</p> <ul> <li><code>list</code>: List of column names.</li> </ul>"},{"location":"sql_interactions/#truncate-the-specified-table","title":"Truncate the specified table.","text":"<p><pre><code>truncate_table()\n</code></pre> Returns: <code>None</code></p>"},{"location":"sql_interactions/#drop-the-specified-table-from-the-database","title":"Drop the specified table from the database.","text":"<p>This method executes an SQL query to drop the table specified by the <code>table_name</code> attribute.</p> <p><pre><code>drop_table()\n</code></pre> Returns: </p> <ul> <li><code>None</code></li> </ul> <p>Raises:</p> <ul> <li><code>Exception</code>: If an error occurs while dropping the table.</li> </ul> <p>Note:</p> <ul> <li> <p>Ensure that the <code>table_name</code> attribute is properly set before calling this method.</p> </li> <li> <p>This operation is irreversible and permanently deletes the specified table.</p> </li> </ul>"},{"location":"sql_interactions/#insert-multiple-rows-into-the-specified-table-based-on-the-given-pandas-dataframe","title":"Insert multiple rows into the specified table based on the given Pandas DataFrame.","text":"<p><pre><code>insert_many(df: pd.DataFrame)\n</code></pre> Returns: </p> <ul> <li><code>str</code></li> </ul> <p>Args:</p> <ul> <li><code>df (pd.DataFrame)</code>: Pandas DataFrame containing the data to be inserted.</li> </ul> <p>Raises:</p> <ul> <li><code>Exception</code>: If an error occurs while inserting the data into the table.</li> </ul>"},{"location":"sql_interactions/#retrieve-data-from-the-specified-table-in-chunks-and-convert-it-into-a-pandas-dataframe","title":"Retrieve data from the specified table in chunks and convert it into a Pandas DataFrame.","text":"<pre><code>from_sql_to_pandas(chunksize: int, id_value: str)\n</code></pre> <p>Args:</p> <ul> <li> <p><code>chunksize (int)</code>: Number of rows to fetch in each chunk.</p> </li> <li> <p><code>id_value (str)</code>: Column name to be used for ordering and fetching data in chunks.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>pd.DataFrame</code>: Concatenated Pandas DataFrame containing the selected data.</li> </ul>"},{"location":"sql_interactions/#select-a-row-from-the-specified-table-based-on-the-given-id","title":"Select a row from the specified table based on the given ID.","text":"<pre><code>select_by_id(id: int, db_name: str, table_name: str, table_id: str)\n</code></pre> <p>Args:</p> <ul> <li> <p><code>id (int)</code>: ID value to be used in the WHERE clause.</p> </li> <li> <p><code>db_name (str)</code>: Name of the SQLite database.</p> </li> <li> <p><code>table_name (str)</code>: Name of the table to be queried.</p> </li> <li> <p><code>table_id (str)</code>: Name of the column representing the ID in the table.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>dict</code>: Dictionary containing the selected data.</li> </ul>"},{"location":"sql_interactions/#select-multiple-rows-from-the-specified-table-based-on-the-start-id-and-the-number-of-rows","title":"Select multiple rows from the specified table based on the start ID and the number of rows.","text":"<p><pre><code>select_many(start_id: int, head: int, db_name: str, \n            table_name: str, table_id: str)\n</code></pre> Args:</p> <ul> <li> <p><code>start_id (int)</code>: Starting ID value for the selection.</p> </li> <li> <p><code>head (int)</code>: Number of rows to be retrieved.</p> </li> <li> <p><code>db_name (str)</code>: Name of the SQLite database.</p> </li> <li> <p><code>table_name (str)</code>: Name of the table to be queried.</p> </li> <li> <p><code>table_id (str)</code>: Name of the column representing the ID in the table.</p> </li> </ul> <p>Returns:</p> <ul> <li><code>dict</code>: Dictionary containing the selected data.</li> </ul>"},{"location":"sql_interactions/#delete-a-row-from-the-specified-table-based-on-the-given-id","title":"Delete a row from the specified table based on the given ID.","text":"<p><pre><code>delete_by_id(id: int, db_name: str, table_name: str, table_id: str)\n</code></pre> Args:</p> <ul> <li> <p><code>id (int)</code>: ID value to be used in the WHERE clause.</p> </li> <li> <p><code>db_name (str)</code>: Name of the SQLite database.</p> </li> <li> <p><code>table_name (str)</code>: Name of the table to be deleted from.</p> </li> <li> <p><code>table_id (str)</code>: Name of the column representing the ID in the table</p> </li> </ul>"},{"location":"sql_interactions/#update-a-row-in-the-specified-table-based-on-the-given-id-and-update-values","title":"Update a row in the specified table based on the given ID and update values.","text":"<p><pre><code>update_by_id(id: int, update_values: dict,\n                     db_name: str, table_name: str, table_id: str)\n</code></pre> Args:</p> <p><code>id (int)</code>: ID value to be used in the WHERE clause.</p> <p><code>update_values (dict)</code>: Dictionary containing column names as keys and new values as values.</p> <p><code>db_name (str)</code>: Name of the SQLite database.</p> <p><code>table_name (str)</code>: Name of the table to be updated.</p> <p><code>table_id (str)</code>: Name of the column representing the ID in the table.</p>"},{"location":"sql_interactions/#insert-a-new-row-into-the-specified-table-based-on-the-given-values","title":"Insert a new row into the specified table based on the given values.","text":"<p><pre><code>insert_by_id(insert_values: dict, db_name: str, table_name: str)\n</code></pre> Args:</p> <ul> <li> <p><code>insert_values (dict)</code>: Dictionary containing column names as keys and values to be inserted as values.</p> </li> <li> <p><code>db_name (str)</code>: Name of the SQLite database.</p> </li> <li> <p><code>table_name (str)</code>: Name of the table to insert the new row into.</p> </li> </ul>"},{"location":"sql_interactions/#execute-a-custom-sql-query-on-the-specified-database-connection","title":"Execute a custom SQL query on the specified database connection.","text":"<pre><code>execute_custom_query(query, conn_string='temp.db')\n</code></pre> <p>Args:</p> <ul> <li> <p><code>query (str)</code>: SQL query to be executed.</p> </li> <li> <p><code>conn_string (str)</code>: Database connection string (default is <code>temp.db</code>).</p> </li> </ul> <p>Returns:</p> <ul> <li><code>list</code>: List of query results.</li> </ul>"},{"location":"sql_interactions/#queries-to-test-the-functionality-of-the-database","title":"Queries to Test the Functionality of the Database","text":""},{"location":"sql_interactions/#modules","title":"Modules","text":"<pre><code>from CLV_Analysis.DB.sql_interactions import SqlHandler\nimport pandas as pd\n</code></pre>"},{"location":"sql_interactions/#create-an-instance-of-sqlhandler-class","title":"Create an Instance of SqlHandler() Class","text":"<pre><code>Inst = SqlHandler('temp', ['sales_fact','transactions',\n                           'customer','product', 'date'])\n</code></pre>"},{"location":"sql_interactions/#write-some-queries","title":"Write Some Queries","text":"<p><pre><code># Retrieve customers who made transactions in the month of January 2022.\nquery1 = \"\"\"SELECT c.*\nFROM customer c\nJOIN transactions t\nON c.customer_id = t.customer_id\nJOIN date d\nON t.date = d.date\nWHERE d.year = 2022\nAND d.month = 1;\"\"\"\n</code></pre> <pre><code># Retrieve male customers from Singapore.\nquery2 = \"\"\"SELECT customer_id, customer_name, customer_surname\nFROM customer\nWHERE gender = 'Male'\nAND country = 'Singapore';\"\"\"\n</code></pre> <pre><code># Retrieve products with prices greater than $50.\nquery3 = \"\"\"SELECT *\nFROM product\nWHERE price &gt; 50;\"\"\"\n</code></pre> <pre><code>queries = [query1,\n           query2,\n           query3]\n</code></pre></p>"},{"location":"sql_interactions/#execute-queries","title":"Execute Queries","text":"<pre><code>ls = []\nfor i in queries:\n    ls.append(Inst.execute_custom_query(i))\n</code></pre>"},{"location":"sql_interactions/#print-the-results","title":"Print the Results","text":"<pre><code>count = 0\n\nfor i in ls:\n    count+=1\n    print(f'query {count}')\n    print(pd.DataFrame(i))\n    print(\"_______________\")\n</code></pre>"},{"location":"synthetic_data/","title":"Synthetic Data for the Default Database","text":""},{"location":"synthetic_data/#the-data-generator-module","title":"The Data Generator Module","text":"<p>The <code>CLV_Analysis/DB/data_generator</code> module provides functions for generating synthetic data for the Sales Fact, Product, Customer,Transaction, and Date entities. It uses the Faker library to generate realistic fake data for testing and development purposes.</p>"},{"location":"synthetic_data/#functions","title":"Functions:","text":"<ul> <li> <p><code>generate_product</code>: Generates fake data for a product.</p> <p><pre><code>generate_product(product_id)\n</code></pre> Parameters: <code>product_id</code>: ID of the product.</p> <p>Returns: Dictionary containing fake data for a product.</p> </li> </ul> <ul> <li> <p><code>generate_customer</code>: Generates fake data for a customer.</p> <p><pre><code>generate_customer(customer_id)\n</code></pre> Parameters: <code>customer_id</code>: ID of the customer.</p> <p>Returns: Dictionary containing fake data for a customer.</p> </li> </ul> <ul> <li> <p><code>generate_transaction</code>: Generates fake data for a transaction.</p> <p><pre><code>generate_transaction(transaction_id)\n</code></pre> Parameters: <code>transaction_id</code>: ID of the transaction.</p> <p>Returns: Dictionary containing fake data for a transaction.</p> </li> </ul> <ul> <li> <p><code>generate_date</code>: Generates fake data for a date.</p> <pre><code>generate_date(date_id)\n</code></pre> <p>Parameters: <code>date_id</code>: ID of the date.</p> <p>Returns: Dictionary containing fake data for a date.</p> </li> </ul> <ul> <li> <p><code>generate_sales</code>: Generates fake data for sales.  </p> <p><pre><code>generate_sales()\n</code></pre> Returns: Dictionary containing fake data for sales.</p> </li> </ul> <p>Note:</p> <ul> <li>The functions in this module are intended for testing and development purposes, and the generated data may not reflect real-world scenarios.</li> </ul>"},{"location":"synthetic_data/#synthetic-data-generation-guide","title":"Synthetic Data Generation Guide","text":"<p>This script generates sample data for Customer Lifetime Value (CLV) analysis</p>"},{"location":"synthetic_data/#loading-modules-and-packages","title":"Loading Modules and Packages","text":"<ul> <li>Import modules and packages necessary for data generation.</li> </ul> <pre><code>from CLV_Analysis.DB.data_generator import generate_product\nfrom CLV_Analysis.DB.data_generator import generate_customer\nfrom CLV_Analysis.DB.data_generator import generate_transaction\nfrom CLV_Analysis.DB.data_generator import generate_date\nfrom CLV_Analysis.DB.data_generator import generate_sales\nfrom datetime import datetime\nimport pandas as pd\nimport random\nimport os\n</code></pre>"},{"location":"synthetic_data/#declare-constants","title":"Declare Constants","text":"<ul> <li>Define constants for the number of products, customers, and transactions.</li> </ul> <pre><code>NUMBER_OF_PRODUCTS=5000\nNUMBER_OF_CUSTOMERS=3000\nNUMBER_OF_TRANSACTIONS=4000\n</code></pre>"},{"location":"synthetic_data/#create-data_csv-folder-if-it-doesnt-already-exist","title":"Create \"data_csv\" Folder, If It Doesn't Already Exist","text":"<pre><code># Check if 'data_csv' folder exists, if not, create it\noutput_directory = 'data_csv'\n\nif not os.path.exists(output_directory):\n    os.makedirs(output_directory)\n</code></pre>"},{"location":"synthetic_data/#generate-customer-data","title":"Generate Customer Data","text":"<ul> <li>Generate customer data using the <code>generate_customer</code> function and save it to a CSV file.</li> </ul> <pre><code>customer_data = [generate_customer(customer_id) for customer_id\n                 in range(NUMBER_OF_CUSTOMERS)]\n\n# Save customer data to CSV file in the 'data_csv' folder\noutput_file_path = os.path.join(output_directory, 'customer.csv')\n\npd.DataFrame(customer_data).to_csv(output_file_path, index=False)\n</code></pre>"},{"location":"synthetic_data/#generate-product-data","title":"Generate Product Data","text":"<ul> <li>Generate product data using the <code>generate_product</code> function and save it to a CSV file.</li> </ul> <pre><code>product_data = [generate_product(product_id) for product_id\n                in range(NUMBER_OF_PRODUCTS)]\n\n# Save product data to CSV file in the 'data_csv' folder\noutput_file_path = os.path.join(output_directory, 'product.csv')\n\npd.DataFrame(product_data).to_csv(output_file_path, index=False)\n</code></pre>"},{"location":"synthetic_data/#generate-transaction-data","title":"Generate Transaction Data","text":"<ul> <li>Generate transaction data using the <code>generate_transaction</code> function and save it to a CSV file.</li> </ul> <pre><code>transaction_data = [generate_transaction(transaction_id)\n                    for transaction_id\n                    in range(NUMBER_OF_TRANSACTIONS)] \n\n# Save transaction data to CSV file in the 'data_csv' folder\noutput_file_path = os.path.join(output_directory, 'transactions.csv')\n\npd.DataFrame(transaction_data).to_csv(output_file_path, index=False)\n</code></pre>"},{"location":"synthetic_data/#generate-dates-data","title":"Generate Dates Data","text":"<ul> <li>Generate date data using the <code>generate_date</code> function and save it to a CSV file.</li> </ul> <pre><code># Define the start and end dates as strings\nstart_date = \"2000-01-01\"\nend_date = \"2023-12-31\"\n\n# Convert the date strings to datetime objects\nstart_date_obj = datetime.strptime(start_date, \"%Y-%m-%d\")\nend_date_obj = datetime.strptime(end_date, \"%Y-%m-%d\")\n\n# Calculate the difference between the two dates\nnumber_of_days = (end_date_obj - start_date_obj).days\n\ndates_data = [generate_date(date_id) for date_id\n              in range(number_of_days+1)] \n\n# Save date data to CSV file in the 'data_csv' folder\noutput_file_path = os.path.join(output_directory, 'date.csv')\npd.DataFrame(dates_data).to_csv(output_file_path, index=False)\n</code></pre>"},{"location":"synthetic_data/#generating-sales-data","title":"Generating Sales Data","text":"<ul> <li> <p>Generate sales data by associating transactions with products, customers, and dates.</p> </li> <li> <p>Save the sales data to a CSV file.</p> </li> </ul> <p><pre><code># Convert 'date' columns in both DataFrames to datetime format\nDateData = pd.DataFrame(dates_data)\nTransData = pd.DataFrame(transaction_data)\n\nDateData[\"date\"] = pd.to_datetime(DateData[\"date\"])\nTransData[\"date\"] = pd.to_datetime(TransData[\"date\"])\n</code></pre> <pre><code># Create an array with numbers from 1 to 4000\noriginal_array = list(range(0, NUMBER_OF_TRANSACTIONS))\n\n# Create a new array with randomly duplicated elements\nduplicated_array = []\n\nfor num in original_array:\n\n    # Generate a random number between 1 and 5 (inclusive)\n    duplicates = random.randint(1, 5)\n\n    # Append the number to the new array 'duplicates' times\n    duplicated_array.extend([num] * duplicates)\n</code></pre> <pre><code># Save sales data to CSV file in the 'data_csv' folder\noutput_file_path = os.path.join(output_directory, 'sales.csv')\n\n# Create a DataFrame with sales data \nsales_data = [generate_sales() for i in range(len(duplicated_array))] \nsales_data = pd.DataFrame(sales_data)\n\n# Generate a 'transaction_id' column\nsales_data[\"transaction_id\"] = duplicated_array\n\n# Select relevant columns for the sales_data DataFrame\nsales_data = sales_data[['transaction_id', 'product_id', 'quantity']]\n\n# Merge sales_data with transaction and date information\nsales_data = sales_data.merge(TransData,\n                              on='transaction_id', how='left')\nsales_data = sales_data.merge(DateData, on='date', how='left')\n\n# Select the final columns for the sales_data DataFrame\nsales_data = sales_data[['transaction_id','product_id',\n                         'customer_id', 'quantity', 'date_id']]\n\n# Save the final sales_data DataFrame to a CSV file\nsales_data.to_csv(output_file_path, index=False)\n</code></pre></p>"}]}